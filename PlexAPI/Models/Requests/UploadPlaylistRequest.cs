//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace PlexAPI.Models.Requests
{
    using PlexAPI.Models.Requests;
    using PlexAPI.Utils;
    
    public class UploadPlaylistRequest
    {

        /// <summary>
        /// absolute path to a directory on the server where m3u files are stored, or the absolute path to a playlist file on the server. <br/>
        /// 
        /// <remarks>
        /// If the `path` argument is a directory, that path will be scanned for playlist files to be processed. <br/>
        /// Each file in that directory creates a separate playlist, with a name based on the filename of the file that created it. <br/>
        /// The GUID of each playlist is based on the filename. <br/>
        /// If the `path` argument is a file, that file will be used to create a new playlist, with the name based on the filename of the file that created it. <br/>
        /// The GUID of each playlist is based on the filename.<br/>
        /// 
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=path")]
        public string Path { get; set; } = default!;

        /// <summary>
        /// Force overwriting of duplicate playlists.  <br/>
        /// 
        /// <remarks>
        /// By default, a playlist file uploaded with the same path will overwrite the existing playlist. <br/>
        /// The `force` argument is used to disable overwriting.  <br/>
        /// If the `force` argument is set to 0, a new playlist will be created suffixed with the date and time that the duplicate was uploaded.<br/>
        /// 
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=force")]
        public QueryParamForce Force { get; set; } = default!;
    }
}