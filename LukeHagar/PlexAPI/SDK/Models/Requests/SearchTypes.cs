//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace LukeHagar.PlexAPI.SDK.Models.Requests
{
    using LukeHagar.PlexAPI.SDK.Utils;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;
    
    [JsonConverter(typeof(OpenEnumConverter))]
    public class SearchTypes : IEquatable<SearchTypes>
    {
        public static readonly SearchTypes Movies = new SearchTypes("movies");
        public static readonly SearchTypes Music = new SearchTypes("music");
        public static readonly SearchTypes OtherVideos = new SearchTypes("otherVideos");
        public static readonly SearchTypes People = new SearchTypes("people");
        public static readonly SearchTypes Tv = new SearchTypes("tv");

        private static readonly Dictionary <string, SearchTypes> _knownValues =
            new Dictionary <string, SearchTypes> ()
            {
                ["movies"] = Movies,
                ["music"] = Music,
                ["otherVideos"] = OtherVideos,
                ["people"] = People,
                ["tv"] = Tv
            };

        private static readonly ConcurrentDictionary<string, SearchTypes> _values =
            new ConcurrentDictionary<string, SearchTypes>(_knownValues);

        private SearchTypes(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static SearchTypes Of(string value)
        {
            return _values.GetOrAdd(value, _ => new SearchTypes(value));
        }

        public static implicit operator SearchTypes(string value) => Of(value);
        public static implicit operator string(SearchTypes searchtypes) => searchtypes.Value;

        public static SearchTypes[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as SearchTypes);

        public bool Equals(SearchTypes? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}