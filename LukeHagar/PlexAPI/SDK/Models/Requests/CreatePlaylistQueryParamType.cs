//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace LukeHagar.PlexAPI.SDK.Models.Requests
{
    using LukeHagar.PlexAPI.SDK.Utils;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;
    
    /// <summary>
    /// type of playlist to create
    /// </summary>
    [JsonConverter(typeof(OpenEnumConverter))]
    public class CreatePlaylistQueryParamType : IEquatable<CreatePlaylistQueryParamType>
    {
        public static readonly CreatePlaylistQueryParamType Audio = new CreatePlaylistQueryParamType("audio");
        public static readonly CreatePlaylistQueryParamType Video = new CreatePlaylistQueryParamType("video");
        public static readonly CreatePlaylistQueryParamType Photo = new CreatePlaylistQueryParamType("photo");

        private static readonly Dictionary <string, CreatePlaylistQueryParamType> _knownValues =
            new Dictionary <string, CreatePlaylistQueryParamType> ()
            {
                ["audio"] = Audio,
                ["video"] = Video,
                ["photo"] = Photo
            };

        private static readonly ConcurrentDictionary<string, CreatePlaylistQueryParamType> _values =
            new ConcurrentDictionary<string, CreatePlaylistQueryParamType>(_knownValues);

        private CreatePlaylistQueryParamType(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static CreatePlaylistQueryParamType Of(string value)
        {
            return _values.GetOrAdd(value, _ => new CreatePlaylistQueryParamType(value));
        }

        public static implicit operator CreatePlaylistQueryParamType(string value) => Of(value);
        public static implicit operator string(CreatePlaylistQueryParamType createplaylistqueryparamtype) => createplaylistqueryparamtype.Value;

        public static CreatePlaylistQueryParamType[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as CreatePlaylistQueryParamType);

        public bool Equals(CreatePlaylistQueryParamType? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}