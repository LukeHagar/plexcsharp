//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace LukeHagar.PlexAPI.SDK.Models.Requests
{
    using LukeHagar.PlexAPI.SDK.Utils;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The type of media content in the Plex library. This can represent videos, music, or photos.<br/>
    /// 
    /// <remarks>
    /// 
    /// </remarks>
    /// </summary>
    [JsonConverter(typeof(OpenEnumConverter))]
    public class GetLibraryItemsType : IEquatable<GetLibraryItemsType>
    {
        public static readonly GetLibraryItemsType Movie = new GetLibraryItemsType("movie");
        public static readonly GetLibraryItemsType TvShow = new GetLibraryItemsType("show");
        public static readonly GetLibraryItemsType Season = new GetLibraryItemsType("season");
        public static readonly GetLibraryItemsType Episode = new GetLibraryItemsType("episode");
        public static readonly GetLibraryItemsType Artist = new GetLibraryItemsType("artist");
        public static readonly GetLibraryItemsType Album = new GetLibraryItemsType("album");
        public static readonly GetLibraryItemsType Track = new GetLibraryItemsType("track");
        public static readonly GetLibraryItemsType PhotoAlbum = new GetLibraryItemsType("photoalbum");
        public static readonly GetLibraryItemsType Photo = new GetLibraryItemsType("photo");
        public static readonly GetLibraryItemsType Collection = new GetLibraryItemsType("collection");

        private static readonly Dictionary <string, GetLibraryItemsType> _knownValues =
            new Dictionary <string, GetLibraryItemsType> ()
            {
                ["movie"] = Movie,
                ["show"] = TvShow,
                ["season"] = Season,
                ["episode"] = Episode,
                ["artist"] = Artist,
                ["album"] = Album,
                ["track"] = Track,
                ["photoalbum"] = PhotoAlbum,
                ["photo"] = Photo,
                ["collection"] = Collection
            };

        private static readonly ConcurrentDictionary<string, GetLibraryItemsType> _values =
            new ConcurrentDictionary<string, GetLibraryItemsType>(_knownValues);

        private GetLibraryItemsType(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static GetLibraryItemsType Of(string value)
        {
            return _values.GetOrAdd(value, _ => new GetLibraryItemsType(value));
        }

        public static implicit operator GetLibraryItemsType(string value) => Of(value);
        public static implicit operator string(GetLibraryItemsType getlibraryitemstype) => getlibraryitemstype.Value;

        public static GetLibraryItemsType[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as GetLibraryItemsType);

        public bool Equals(GetLibraryItemsType? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}