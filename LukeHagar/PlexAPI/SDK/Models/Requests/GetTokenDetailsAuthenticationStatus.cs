//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace LukeHagar.PlexAPI.SDK.Models.Requests
{
    using LukeHagar.PlexAPI.SDK.Utils;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;
    
    /// <summary>
    /// String representation of subscriptionActive
    /// </summary>
    [JsonConverter(typeof(OpenEnumConverter))]
    public class GetTokenDetailsAuthenticationStatus : IEquatable<GetTokenDetailsAuthenticationStatus>
    {
        public static readonly GetTokenDetailsAuthenticationStatus Inactive = new GetTokenDetailsAuthenticationStatus("Inactive");
        public static readonly GetTokenDetailsAuthenticationStatus Active = new GetTokenDetailsAuthenticationStatus("Active");

        private static readonly Dictionary <string, GetTokenDetailsAuthenticationStatus> _knownValues =
            new Dictionary <string, GetTokenDetailsAuthenticationStatus> ()
            {
                ["Inactive"] = Inactive,
                ["Active"] = Active
            };

        private static readonly ConcurrentDictionary<string, GetTokenDetailsAuthenticationStatus> _values =
            new ConcurrentDictionary<string, GetTokenDetailsAuthenticationStatus>(_knownValues);

        private GetTokenDetailsAuthenticationStatus(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static GetTokenDetailsAuthenticationStatus Of(string value)
        {
            return _values.GetOrAdd(value, _ => new GetTokenDetailsAuthenticationStatus(value));
        }

        public static implicit operator GetTokenDetailsAuthenticationStatus(string value) => Of(value);
        public static implicit operator string(GetTokenDetailsAuthenticationStatus gettokendetailsauthenticationstatus) => gettokendetailsauthenticationstatus.Value;

        public static GetTokenDetailsAuthenticationStatus[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as GetTokenDetailsAuthenticationStatus);

        public bool Equals(GetTokenDetailsAuthenticationStatus? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}