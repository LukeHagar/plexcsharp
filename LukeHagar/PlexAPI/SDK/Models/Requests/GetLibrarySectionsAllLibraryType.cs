//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace LukeHagar.PlexAPI.SDK.Models.Requests
{
    using LukeHagar.PlexAPI.SDK.Utils;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The type of media content in the Plex library. This can represent videos, music, or photos.<br/>
    /// 
    /// <remarks>
    /// 
    /// </remarks>
    /// </summary>
    [JsonConverter(typeof(OpenEnumConverter))]
    public class GetLibrarySectionsAllLibraryType : IEquatable<GetLibrarySectionsAllLibraryType>
    {
        public static readonly GetLibrarySectionsAllLibraryType Movie = new GetLibrarySectionsAllLibraryType("movie");
        public static readonly GetLibrarySectionsAllLibraryType TvShow = new GetLibrarySectionsAllLibraryType("show");
        public static readonly GetLibrarySectionsAllLibraryType Season = new GetLibrarySectionsAllLibraryType("season");
        public static readonly GetLibrarySectionsAllLibraryType Episode = new GetLibrarySectionsAllLibraryType("episode");
        public static readonly GetLibrarySectionsAllLibraryType Artist = new GetLibrarySectionsAllLibraryType("artist");
        public static readonly GetLibrarySectionsAllLibraryType Album = new GetLibrarySectionsAllLibraryType("album");
        public static readonly GetLibrarySectionsAllLibraryType Track = new GetLibrarySectionsAllLibraryType("track");
        public static readonly GetLibrarySectionsAllLibraryType PhotoAlbum = new GetLibrarySectionsAllLibraryType("photoalbum");
        public static readonly GetLibrarySectionsAllLibraryType Photo = new GetLibrarySectionsAllLibraryType("photo");
        public static readonly GetLibrarySectionsAllLibraryType Collection = new GetLibrarySectionsAllLibraryType("collection");

        private static readonly Dictionary <string, GetLibrarySectionsAllLibraryType> _knownValues =
            new Dictionary <string, GetLibrarySectionsAllLibraryType> ()
            {
                ["movie"] = Movie,
                ["show"] = TvShow,
                ["season"] = Season,
                ["episode"] = Episode,
                ["artist"] = Artist,
                ["album"] = Album,
                ["track"] = Track,
                ["photoalbum"] = PhotoAlbum,
                ["photo"] = Photo,
                ["collection"] = Collection
            };

        private static readonly ConcurrentDictionary<string, GetLibrarySectionsAllLibraryType> _values =
            new ConcurrentDictionary<string, GetLibrarySectionsAllLibraryType>(_knownValues);

        private GetLibrarySectionsAllLibraryType(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static GetLibrarySectionsAllLibraryType Of(string value)
        {
            return _values.GetOrAdd(value, _ => new GetLibrarySectionsAllLibraryType(value));
        }

        public static implicit operator GetLibrarySectionsAllLibraryType(string value) => Of(value);
        public static implicit operator string(GetLibrarySectionsAllLibraryType getlibrarysectionsalllibrarytype) => getlibrarysectionsalllibrarytype.Value;

        public static GetLibrarySectionsAllLibraryType[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as GetLibrarySectionsAllLibraryType);

        public bool Equals(GetLibrarySectionsAllLibraryType? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}