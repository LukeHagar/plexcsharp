//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace LukeHagar.PlexAPI.SDK.Models.Requests
{
    using LukeHagar.PlexAPI.SDK.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// Setting that indicates the episode ordering for the show <br/>
    /// 
    /// <remarks>
    /// None = Library default, <br/>
    /// tmdbAiring = The Movie Database (Aired), <br/>
    /// aired = TheTVDB (Aired), <br/>
    /// dvd = TheTVDB (DVD), <br/>
    /// absolute = TheTVDB (Absolute)).<br/>
    /// 
    /// </remarks>
    /// </summary>
    public enum ShowOrdering
    {
        [JsonProperty("None")]
        None,
        [JsonProperty("tmdbAiring")]
        TmdbAiring,
        [JsonProperty("aired")]
        Aired,
        [JsonProperty("dvd")]
        Dvd,
        [JsonProperty("absolute")]
        Absolute,
    }

    public static class ShowOrderingExtension
    {
        public static string Value(this ShowOrdering value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static ShowOrdering ToEnum(this string value)
        {
            foreach(var field in typeof(ShowOrdering).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is ShowOrdering)
                    {
                        return (ShowOrdering)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum ShowOrdering");
        }
    }

}